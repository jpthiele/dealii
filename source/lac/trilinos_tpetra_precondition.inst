// ---------------------------------------------------------------------
//
// Copyright (C) 2008 - 2023 by the deal.II authors
//
// This file is part of the deal.II library.
//
// The deal.II library is free software; you can use it, redistribute
// it, and/or modify it under the terms of the GNU Lesser General
// Public License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// The full text of the license can be found in the file LICENSE.md at
// the top level directory of deal.II.
//
// ---------------------------------------------------------------------

#ifdef HAVE_TPETRA_INST_FLOAT
template class PreconditionBase<float>;
template class PreconditionRILUK<float>;

template class PreconditionBase<
  float,
  Tpetra::KokkosClassic::DefaultNode::DefaultNodeType,
  Belos::OperatorT<
    Xpetra::MultiVector<float, int, dealii::types::signed_global_dof_index>>,
  Xpetra::MultiVector<float, int, dealii::types::signed_global_dof_index>>;
template class PreconditionFROSch<float>;
#endif


#ifdef HAVE_TPETRA_INST_DOUBLE
template class PreconditionBase<double>;
template class PreconditionRILUK<double>;

template class PreconditionBase<
  double,
  Tpetra::KokkosClassic::DefaultNode::DefaultNodeType,
  Belos::OperatorT<
    Xpetra::MultiVector<double, int, dealii::types::signed_global_dof_index>>,
  Xpetra::MultiVector<double, int, dealii::types::signed_global_dof_index>>;
template class PreconditionFROSch<double>;
#endif


#ifdef HAVE_TPETRA_INST_COMPLEX_FLOAT
template class PreconditionBase<std::complex<float>>;
template class PreconditionRILUK<std::complex<float>>;

template class PreconditionBase<
  std::complex<float>,
  Tpetra::KokkosClassic::DefaultNode::DefaultNodeType,
  Belos::OperatorT<
    Xpetra::MultiVector<std::complex<float>, int, dealii::types::signed_global_dof_index>>,
  Xpetra::MultiVector<std::complex<float>, int, dealii::types::signed_global_dof_index>>;
template class PreconditionFROSch<std::complex<float>>;
#endif


#ifdef HAVE_TPETRA_INST_COMPLEX_DOUBLE
template class PreconditionBase<std::complex<double>>;
template class PreconditionRILUK<std::complex<double>>;

template class PreconditionBase<
  std::complex<double>,
  Tpetra::KokkosClassic::DefaultNode::DefaultNodeType,
  Belos::OperatorT<
    Xpetra::MultiVector<std::complex<double>, int, dealii::types::signed_global_dof_index>>,
  Xpetra::MultiVector<std::complex<double>, int, dealii::types::signed_global_dof_index>>;
template class PreconditionFROSch<std::complex<double>>;
#endif
